// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import{IRouterV2} from '../contracts/interfaces/IRouterV2.sol';
import "../contracts/interfaces/IERC20.sol";
import "../contracts/interfaces/ERC20.sol";
import "../contracts/mangoToken.sol";



contract MangoTaxTest is Test {
    MANGO_DEFI public mango;
    address public owner;
    address public taxWallet;
    address public pair;

    function setUp() public {
        owner = address(this); // Test contract acts as owner
        taxWallet = owner;
        pair = address(0x123); // Mock DEX pair address

        // Deploy MANGO token with mock router
        mango = new MANGO_DEFI(address(0));
        
        // Configure pair and taxes
        mango.addPair(pair); // Marks address as DEX pair
        //mango.setTaxes(2, 3); // 2% buy tax, 3% sell tax

        // Fund the mock pair with tokens (simulate liquidity)
        deal(address(mango), pair, 1000e18); // Uses Foundry's deal cheatcode
    }

    // Test BUY tax: Transfer from DEX pair to user
    function testBuyTax() public {
        address user = address(0x456);
        uint256 buyAmount = 100e18; // 100 MANGO

        uint256 expectedTax = (buyAmount * mango.buyTax()) / 10000;
        uint256 expectedReceived = buyAmount - expectedTax;

        // Simulate buy: Pair sends tokens to user
        vm.prank(pair);
        mango.transfer(user, buyAmount);

        // Verify user received tokens after tax
        assertEq(mango.balanceOf(user), expectedReceived, "Buy tax not applied");
        
        // Verify tax sent to taxWallet
        assertEq(mango.balanceOf(taxWallet), expectedTax, "Buy tax not collected");
    }

    // Test SELL tax: Transfer from user to DEX pair
    function testSellTax() public {
        address user = address(0x456);
        uint256 sellAmount = 100e18; // 100 MANGO

        // Fund user (no tax since owner is excluded)
        deal(address(mango), user, sellAmount);

        uint256 expectedTax = (sellAmount * mango.sellTax()) / 10000;
        uint256 expectedReceived = sellAmount - expectedTax;

        // Simulate sell: User sends tokens to pair
        vm.prank(user);
        mango.transfer(pair, sellAmount);

        // Verify pair received tokens after tax
        assertEq(expectedTax , expectedReceived, "Sell tax not applied");
        
        // Verify tax sent to taxWallet
        assertEq(mango.balanceOf(taxWallet), expectedTax, "Sell tax not collected");
    }
}